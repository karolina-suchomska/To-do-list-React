{"version":3,"sources":["components/TodoInput.js","components/TodoList.js","components/Todo.js","serviceWorker.js","index.js","components/App.js"],"names":["TodoInput","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","defineProperty","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","uuid","text","state","complete","react_default","a","createElement","className","onChange","placeholder","onClick","Component","TodoList","style","textDecoration","todo","changeComplete","onDelete","Todo","addTodo","todos","concat","toConsumableArray","map","objectSpread","updateTodo","clickButon","todoShow","console","log","handleDeleteTodo","filter","handleAllDeleteTodo","handleAllComplete","allComplete","_this2","Container","Row","Col","components_TodoInput","length","components_TodoList","key","Boolean","window","location","hostname","match","ReactDOM","render","components_Todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df354cf4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\n\r\nclass TodoInput extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            id: uuid(),\r\n            text: \"\"\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.onSubmit({\r\n            id: uuid(),\r\n            text: this.state.text,\r\n            complete: false\r\n        })\r\n        this.setState({\r\n            text: \"\"\r\n        })\r\n    }\r\n   \r\n    render() { \r\n        return ( \r\n            <div>\r\n               <form className=\"todo-input\" onSubmit={this.handleSubmit}>\r\n                   <span className=\"todo-input-text\">\r\n                        <input \r\n                            value={this.state.text}\r\n                            onChange={this.handleChange}\r\n                            name=\"text\"\r\n                            placeholder=\"Add the new todo\"\r\n                        /> \r\n                   </span>\r\n                    <span className=\"todo-button-add\">\r\n                        <button onClick={this.handleSubmit}>Add</button>\r\n                    </span>\r\n               </form>                \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default TodoInput;","import React from 'react';\r\n\r\nconst TodoList = (props) => {\r\n    return ( \r\n        <div> \r\n            <span \r\n                className=\"todo-list\" \r\n                style={{\r\n                    textDecoration: props.todo.complete ? \"line-through\" : \"\"\r\n                }}\r\n                onClick={props.changeComplete}\r\n            >\r\n                {props.todo.text}\r\n            </span>\r\n            <span className=\"todo-button-delete\">\r\n                <button onClick={props.onDelete}>X</button>\r\n            </span>\r\n        </div> \r\n     );\r\n}\r\n \r\nexport default TodoList;","import React, { Component } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport TodoInput from './TodoInput';\r\nimport TodoList from './TodoList';\r\n\r\nclass Todo extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todos: [],\r\n            todoShow: 'all',\r\n            allComplete: true,\r\n            clickButon: 'false',\r\n        };\r\n    }\r\n\r\n    addTodo = todo => {\r\n        if(todo.text !== \"\") {\r\n            this.setState(state => ({\r\n            todos: [...state.todos, todo]\r\n            }))\r\n        }\r\n    }\r\n\r\n    changeComplete = id => {\r\n        this.setState(state => ({\r\n            todos: state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                       ...todo,\r\n                        complete: !todo.complete\r\n                    };\r\n                }\r\n                else {\r\n                    return todo;\r\n                }\r\n            })\r\n        }))\r\n    }\r\n\r\n    updateTodo = (e, clickButon) => {\r\n        this.setState({\r\n            todoShow: e,\r\n            clickButon: this.state.clickButon\r\n        },()=>console.log(clickButon))\r\n    }\r\n\r\n    handleDeleteTodo = id => {\r\n        this.setState(state => ({\r\n            todos: state.todos.filter(todo => todo.id !== id)\r\n        }))\r\n    }\r\n\r\n    handleAllDeleteTodo = () => {\r\n        this.setState(state => ({\r\n            todos: state.todos.filter(todo => !todo.complete)\r\n        }));\r\n    }\r\n\r\n    handleAllComplete = () => {\r\n        this.setState(state =>({\r\n            todos: state.todos.map(todo => ({\r\n                ...todo,\r\n                complete: state.allComplete\r\n            }))\r\n        }))\r\n    }\r\n\r\n    render() { \r\n        let todos = [];\r\n\r\n        if (this.state.todoShow === 'all') {\r\n            todos = this.state.todos;\r\n        }\r\n        else if (this.state.todoShow === 'active') {\r\n            todos = this.state.todos.filter(todo => !todo.complete);\r\n        }\r\n        else if (this.state.todoShow === 'complete') {\r\n            todos = this.state.todos.filter(todo => todo.complete);\r\n        }\r\n\r\n        return ( \r\n            <div className=\"todo\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col>\r\n                            <div className=\"todo-button-active\">\r\n                                <button onClick={() => this.updateTodo('all')}>All</button>\r\n                                <button onClick={() => this.updateTodo('active')} >Active</button>\r\n                                <button onClick={() => this.updateTodo('complete')} >Complete</button> \r\n                            </div>\r\n                            <div className=\"todo-button-complete\"> \r\n                                <button onClick={this.handleAllComplete}>Complete all</button>  \r\n                            </div>\r\n                            <TodoInput onSubmit={this.addTodo} />\r\n                            {this.state.todos.filter(todo => todo.complete).length ? (\r\n                                <span className=\"todo-button-delete-all-complete\">\r\n                                    <button onClick={this.handleAllDeleteTodo}>Delete all complete todo</button>\r\n                                </span>\r\n                            ) : null} \r\n                        </Col>\r\n                        <Col>\r\n                            <div className=\"todo-complete\">\r\n                                Tasks to be done: {this.state.todos.filter(todo => !todo.complete).length}\r\n                            </div>                    \r\n                            {todos.map(todo => (\r\n                                <TodoList \r\n                                    key={todo.id} \r\n                                    changeComplete={() => this.changeComplete(todo.id)}\r\n                                    onDelete={() => this.handleDeleteTodo(todo.id)}\r\n                                    todo={todo} />\r\n                            ))}  \r\n                        </Col>\r\n                    </Row>\r\n                </Container>           \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport '../style/Style.scss';\r\nimport Todo from './Todo';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>To-do-list</h1>\r\n      </header>\r\n      <Todo />\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}