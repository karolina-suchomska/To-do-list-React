{"version":3,"sources":["components/TodoInput.js","components/TodoList.js","components/Todo.js","serviceWorker.js","index.js","components/App.js"],"names":["TodoInput","state","id","uuid","text","handleChange","e","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","props","onSubmit","complete","react_default","a","createElement","className","this","onChange","placeholder","onClick","Component","TodoList","style","textDecoration","todo","changeComplete","onDelete","Todo","todos","todoShow","allComplete","addTodo","concat","toConsumableArray","map","objectSpread","updateTodo","handleDeleteTodo","filter","handleAllDeleteTodo","handleAllComplete","_this2","length","components_TodoInput","components_TodoList","key","Boolean","window","location","hostname","match","ReactDOM","render","components_Todo","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d972268.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport uuid from 'uuid';\r\nimport '../Style.scss';\r\n\r\nclass TodoInput extends Component {\r\n    state = {\r\n        id: uuid(),\r\n        text: \"\"\r\n    };\r\n\r\n    handleChange = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.onSubmit({\r\n            id: uuid(),\r\n            text: this.state.text,\r\n            complete: false\r\n        })\r\n        this.setState({\r\n            text: \"\"\r\n        })\r\n    }\r\n   \r\n    render() { \r\n        return ( \r\n            <div>\r\n               <form className=\"todo-input\" onSubmit={this.handleSubmit}>\r\n                   <span className=\"todo-input-text\">\r\n                        <input \r\n                            value={this.state.text}\r\n                            onChange={this.handleChange}\r\n                            name=\"text\"\r\n                            placeholder=\"Add the new todo\"\r\n                        /> \r\n                   </span>\r\n                    <span className=\"todo-button-add\">\r\n                        <button onClick={this.handleSubmit}>Add</button>\r\n                    </span>\r\n               </form>                \r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default TodoInput;","import React from 'react';\r\nimport '../Style.scss';\r\n\r\nconst TodoList = (props) => {\r\n    return ( \r\n        <div> \r\n            <span \r\n                className=\"todo-list\" \r\n                style={{\r\n                    textDecoration: props.todo.complete ? \"line-through\" : \"\"\r\n                }}\r\n                onClick={props.changeComplete}\r\n            >\r\n                {props.todo.text}\r\n            </span>\r\n            <span className=\"todo-button-delete\">\r\n                <button onClick={props.onDelete}>x</button>\r\n            </span>\r\n        </div> \r\n     );\r\n}\r\n \r\nexport default TodoList;","import React, { Component } from 'react';\r\nimport TodoInput from './TodoInput';\r\nimport TodoList from './TodoList';\r\nimport '../Style.scss'\r\n\r\nclass Todo extends Component {\r\n    state = {\r\n        todos: [],\r\n        todoShow: 'all',\r\n        allComplete: true,\r\n    };\r\n\r\n    addTodo = todo => {\r\n        if(todo.text !== \"\") {\r\n            this.setState(state => ({\r\n            todos: [...state.todos, todo]\r\n            }))\r\n        }\r\n    }\r\n\r\n    changeComplete = id => {\r\n        this.setState(state => ({\r\n            todos: state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                       ...todo,\r\n                        complete: !todo.complete\r\n                    };\r\n                }\r\n                else {\r\n                    return todo;\r\n                }\r\n            })\r\n        }))\r\n    }\r\n\r\n    updateTodo = e => {\r\n        this.setState({\r\n            todoShow: e,\r\n        })\r\n    }\r\n\r\n    handleDeleteTodo = id => {\r\n        this.setState(state => ({\r\n            todos: state.todos.filter(todo => todo.id !== id)\r\n        }))\r\n    }\r\n\r\n    handleAllDeleteTodo = () => {\r\n        this.setState(state => ({\r\n            todos: state.todos.filter(todo => !todo.complete)\r\n        }));\r\n    }\r\n\r\n    handleAllComplete = () => {\r\n        this.setState(state =>({\r\n            todos: state.todos.map(todo => ({\r\n                ...todo,\r\n                complete: state.allComplete\r\n            }))\r\n        }))\r\n    }\r\n\r\n    render() { \r\n        let todos = [];\r\n\r\n        if (this.state.todoShow === 'all') {\r\n            todos = this.state.todos;\r\n        }\r\n        else if (this.state.todoShow === 'active') {\r\n            todos = this.state.todos.filter(todo => !todo.complete);\r\n        }\r\n        else if (this.state.todoShow === 'complete') {\r\n            todos = this.state.todos.filter(todo => todo.complete);\r\n        }\r\n\r\n        return ( \r\n            <div className=\"todo\">\r\n                <div className=\"todo-done\">\r\n                    Tasks to be done: {this.state.todos.filter(todo => !todo.complete).length}\r\n                </div>\r\n                <div className=\"todo-button-active\">\r\n                    <button className=\"todo-button\" onClick={() => this.updateTodo('all')}>All</button>\r\n                    <button className=\"todo-button\" onClick={() => this.updateTodo('active')} >Active</button>\r\n                    <button className=\"todo-button\" onClick={() => this.updateTodo('complete')} >Complete</button> \r\n                </div>\r\n                <div className=\"todo-button-complete\"> \r\n                    <button onClick={this.handleAllComplete}>Complete all</button>  \r\n                </div>\r\n               <TodoInput onSubmit={this.addTodo} />\r\n               {todos.map(todo => (\r\n                   <TodoList \r\n                    key={todo.id} \r\n                    changeComplete={() => this.changeComplete(todo.id)}\r\n                    onDelete={() => this.handleDeleteTodo(todo.id)}\r\n                    todo={todo} />\r\n               ))} \r\n               {this.state.todos.filter(todo => todo.complete).length ? (\r\n                    <span className=\"todo-button-active\">\r\n                        <button onClick={this.handleAllDeleteTodo}>Delete all complete todo</button>\r\n                    </span>\r\n                ) : null}             \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Todo;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport '../Style.scss';\nimport Todo from './Todo';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>To-do-list</h1>\n        <Todo />\n      </header>\n    </div>\n  );\n}\n"],"sourceRoot":""}